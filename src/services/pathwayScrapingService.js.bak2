/**
 * Pathway Scraping Service
 * Uses Gemini AI to generate comprehensive study abroad pathways for all possible combinations
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { db } from '../firebaseConfig.js';
import { collection, doc, setDoc, getDocs, query, where, addDoc, serverTimestamp, getDoc } from 'firebase/firestore';

class PathwayScrapingService {
  constructor() {
    this.genAI = new GoogleGenerativeAI(import.meta.env.VITE_GOOGLE_AI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    
    // Define all possible combinations for pathway generation
    this.countries = [
      'United States', 'Canada', 'United Kingdom', 'Australia', 'Germany', 
      'France', 'Netherlands', 'Sweden', 'Norway', 'Denmark', 'Switzerland',
      'New Zealand', 'Ireland', 'Italy', 'Spain', 'Belgium', 'Austria',
      'Finland', 'Japan', 'South Korea', 'Singapore'
    ];
    
    this.courses = [
      'Computer Science', 'Data Science', 'Artificial Intelligence', 'Software Engineering',
      'Business Administration', 'Finance', 'Marketing', 'International Business',
      'Mechanical Engineering', 'Electrical Engineering', 'Civil Engineering', 'Chemical Engineering',
      'Medicine', 'Nursing', 'Public Health', 'Pharmacy',
      'Psychology', 'International Relations', 'Economics', 'Political Science',
      'Environmental Science', 'Biotechnology', 'Chemistry', 'Physics',
      'Architecture', 'Design', 'Fine Arts', 'Media Studies',
      'Education', 'Law', 'Social Work', 'Journalism'
    ];
    
    this.academicLevels = ['Bachelor', 'Master', 'PhD'];
    
    this.budgetRanges = [
      { name: 'Low', min: 10000, max: 25000 },
      { name: 'Medium', min: 25000, max: 50000 },
      { name: 'High', min: 50000, max: 100000 },
      { name: 'Premium', min: 100000, max: 200000 }
    ];
    
    this.nationalities = [
      'Indian', 'Chinese', 'Pakistani', 'Bangladeshi', 'Nigerian', 'Brazilian',
      'Mexican', 'Turkish', 'Egyptian', 'Iranian', 'Vietnamese', 'Indonesian',
      'Malaysian', 'Thai', 'Filipino', 'Sri Lankan', 'Nepalese', 'Afghan'
    ];  }

  /**
   * Generate pathway using Gemini AI
   */
  async generatePathwayWithAI(profile) {
    try {
      // Validate API key first
      if (!import.meta.env.VITE_GOOGLE_AI_API_KEY) {
        throw new Error('Google AI API key is not configured. Please add VITE_GOOGLE_AI_API_KEY to your environment variables.');
      }

      // Validate profile data
      if (!profile.country || !profile.course || !profile.academicLevel) {
        throw new Error('Profile is missing required fields: country, course, or academicLevel');
      }
      
      // Set default nationality if not provided
      profile.nationality = profile.nationality || 'International';
      
      // Set default nationality if not provided
      profile.nationality = profile.nationality || 'International';
      
      // Handle optimization flags for partial generation
      let promptTemplate;
      
      if (profile.universityOnly) {
        // Optimized prompt for university recommendations only
        promptTemplate = this.getUniversityRecommendationsPrompt(profile);
      } else if (profile.scholarshipOnly) {
        // Optimized prompt for scholarships only
        promptTemplate = this.getScholarshipOpportunitiesPrompt(profile);
      } else if (profile.stepsOnly) {
        // Optimized prompt for pathway steps only
        promptTemplate = this.getPathwayStepsPrompt(profile);
      } else {
        // Full pathway prompt for complete generation
        promptTemplate = `
You are an expert study abroad consultant specializing in MS programs. Create a comprehensive, personalized study abroad pathway for a ${profile.nationality} student.

**STUDENT PROFILE:**
- Target Country: ${profile.country}
- Field of Study: ${profile.course} (Master's degree)
- Academic Level: ${profile.academicLevel}
- Budget Range: $${profile.budgetRange.min} - $${profile.budgetRange.max} USD
- Nationality: ${profile.nationality}

**INSTRUCTIONS:**
Provide detailed, actionable recommendations covering all aspects of studying abroad. Be specific with numbers, dates, and requirements. Consider the student's nationality for visa requirements and cultural adaptation.

**REQUIRED OUTPUT FORMAT (Valid JSON):**
{
  "universities": [
    {
      "name": "University Name",
      "ranking": "QS World Ranking position",
      "tuitionFee": "Annual fee in USD",
      "location": "City, State/Province",
      "requirements": {
        "gpa": "Minimum GPA on 4.0 scale",
        "ielts": "Minimum IELTS score",
        "toefl": "Minimum TOEFL score",
        "gre": "Required GRE score or 'Not Required'",
        "gmat": "Required GMAT score or 'Not Required'",
        "workExperience": "Required years or 'Not Required'"
      },
      "specialties": ["Program specialization 1", "Program specialization 2"],
      "applicationDeadline": "Application deadline",
      "programDuration": "Duration in months",
      "acceptanceRate": "Acceptance rate percentage"
    }
  ],
  "timeline": [
    {
      "month": "Month name (e.g., January 2024)",
      "timeFromStart": "Months before application deadline",
      "tasks": [
        "Specific task 1",
        "Specific task 2", 
        "Specific task 3"
      ],
      "priority": "Critical/High/Medium/Low",
      "documents": "Documents to prepare this month"
    }
  ],
  "documents": [
    {
      "name": "Document name",
      "description": "Detailed description and how to obtain",
      "required": true,
      "processingTime": "Time needed to obtain",
      "cost": "Cost in USD",
      "tips": "Important tips for preparation"
    }
  ],
  "visaRequirements": {
    "type": "Student visa type (e.g., F-1, Study Permit)",
    "processingTime": "Processing time in weeks",
    "fee": "Visa fee in USD",
    "requirements": [
      "Specific requirement 1",
      "Specific requirement 2"
    ],
    "financialProof": "Required amount to show",
    "medicalRequirements": "Medical exam requirements",
    "biometrics": "Biometric requirements",
    "interview": "Interview requirements and tips"
  },
  "scholarships": [
    {
      "name": "Scholarship name",
      "amount": "Amount in USD or percentage",
      "eligibility": "Detailed eligibility criteria",
      "deadline": "Application deadline",
      "applicationProcess": "How to apply",
      "competitiveness": "How competitive (High/Medium/Low)",
      "renewability": "Renewable conditions"
    }
  ],
  "costs": {
    "tuition": {
      "annual": "Annual tuition in USD",
      "total": "Total program cost"
    },
    "living": {
      "monthly": "Monthly living costs",
      "accommodation": "Monthly accommodation cost",
      "food": "Monthly food cost",
      "transportation": "Monthly transport cost",
      "utilities": "Monthly utilities cost",
      "personal": "Monthly personal expenses"
    },
    "oneTime": {
      "applicationFees": "Total application fees",
      "visaFees": "Visa and related fees",
      "airfare": "One-way airfare estimate",
      "initialSetup": "Initial setup costs"
    },
    "insurance": "Health insurance annual cost",
    "books": "Books and supplies annual cost",
    "totalEstimate": "Total estimated cost for program"
  },
  "languageRequirements": {
    "ielts": {
      "overall": "Minimum overall score",
      "individual": "Minimum individual band scores",
      "validity": "Score validity period"
    },
    "toefl": {
      "overall": "Minimum overall score",
      "individual": "Minimum section scores",
      "validity": "Score validity period"
    },
    "alternatives": ["PTE", "Duolingo", "Cambridge"],
    "preparationTips": [
      "Preparation tip 1",
      "Preparation tip 2"
    ],
    "exemptions": "Conditions for exemption"
  },
  "admissionRequirements": {
    "academic": {
      "minimumGPA": "Minimum GPA requirement",
      "transcriptEvaluation": "Transcript evaluation process",
      "prerequisiteCourses": ["Required prerequisite courses"]
    },
    "standardizedTests": {
      "required": ["List of required tests"],
      "recommended": ["List of recommended tests"],
      "scoreSending": "Score sending requirements"
    },
    "essays": {
      "required": ["Types of essays required"],
      "wordLimits": "Word limit guidelines",
      "topics": ["Common essay topics"]
    },
    "recommendations": {
      "count": "Number of letters required",
      "sources": ["Academic", "Professional"],
      "guidelines": "Guidelines for recommenders"
    },
    "portfolio": "Portfolio requirements if applicable"
  },
  "careerProspects": {
    "averageSalary": {
      "entryLevel": "Entry-level salary in USD",
      "experienced": "Experienced professional salary",
      "topTier": "Top-tier company salary"
    },
    "jobMarket": {
      "outlook": "Job market outlook",
      "growthRate": "Industry growth rate",
      "demand": "Demand level (High/Medium/Low)"
    },
    "topEmployers": [
      "Top employer 1",
      "Top employer 2",
      "Top employer 3"
    ],
    "jobRoles": [
      "Common job role 1",
      "Common job role 2",
      "Common job role 3"
    ],
    "workVisa": {
      "options": ["Work visa options after graduation"],
      "duration": "Work permit duration",
      "pathToPR": "Path to permanent residence"
    },
    "networkingTips": [
      "Networking tip 1",
      "Networking tip 2"
    ]
  },
  "livingInfo": {
    "climate": {
      "description": "Climate description",
      "seasons": "Seasonal information",
      "clothing": "Clothing recommendations"
    },
    "culture": {
      "description": "Cultural highlights",
      "diversity": "Diversity information",
      "socialNorms": "Important social norms",
      "festivals": "Major festivals and holidays"
    },
    "housing": {
      "options": ["On-campus", "Off-campus", "Shared apartments"],
      "costs": "Housing cost ranges",
      "tips": "Housing search tips",
      "contracts": "Lease information"
    },
    "transportation": {
      "public": "Public transportation options",
      "costs": "Transportation costs",
      "studentDiscounts": "Available student discounts",
      "cycling": "Cycling infrastructure"
    },
    "food": {
      "dining": "Dining options",
      "grocery": "Grocery shopping tips",
      "international": "International food availability",
      "dietary": "Dietary restriction accommodations"
    },
    "healthcare": {
      "system": "Healthcare system overview",
      "insurance": "Insurance requirements",
      "costs": "Healthcare costs",
      "access": "How to access healthcare"
    },
    "safety": {
      "overview": "General safety information",
      "emergencyNumbers": "Important emergency numbers",
      "campusSafety": "Campus safety measures",
      "tips": "Safety tips for international students"
    },
    "socialLife": {
      "studentOrganizations": "Student organizations to join",
      "events": "Cultural and social events",
      "recreation": "Recreation and entertainment options",
      "community": "Local community integration tips"
    }
  },
  "additionalSupport": {
    "orientation": "Orientation program information",
    "internationalOffice": "International student office services",
    "academicSupport": "Academic support services",
    "counseling": "Counseling and mental health services",
    "careerServices": "Career services available",
    "languageSupport": "Language support programs"
  },
  "specialConsiderations": {
    "covid19": "COVID-19 related requirements",
    "culturalAdaptation": "Cultural adaptation tips for ${profile.nationality} students",
    "homesickness": "Dealing with homesickness",
    "financialTips": "Financial management tips",
    "academicDifferences": "Academic system differences to expect"
  }
}

**CRITICAL REQUIREMENTS:**
1. Provide exact, current information with specific numbers
2. Include 6-8 top universities with complete details
3. Create a 12-month detailed timeline starting from application prep
4. List all required documents with processing times
5. Include country-specific visa information for ${profile.nationality} nationals
6. Provide realistic cost breakdowns
7. Focus on ${profile.course} career prospects in ${profile.country}
8. Consider cultural aspects for ${profile.nationality} students
9. Ensure all information is actionable and specific
10. Format as valid JSON without any markdown formatting

Generate this comprehensive pathway now:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Clean and parse the JSON response
      let cleanText = text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      
      try {
        return JSON.parse(cleanText);
      } catch (parseError) {
        console.error('Failed to parse AI response:', parseError);
        console.log('Raw response:', text);
        throw new Error('Failed to parse AI response as JSON');
      }
    } catch (error) {
      console.error('Error generating pathway with AI:', error);
      throw error;
    }
  }
  /**
   * Generate a unique pathway ID based on profile
   */
  generatePathwayId(profile) {
    return `${profile.country}_${profile.course}_${profile.academicLevel}_${profile.budgetRange ? profile.budgetRange.name : 'medium'}_${profile.nationality || 'international'}`
      .toLowerCase()
      .replace(/[^a-z0-9_]/g, '_');
  }

  /**
   * Save pathway to Firestore
   */
  async savePathwayToDatabase(profile, pathwayData) {
    try {
      const pathwayId = this.generatePathwayId(profile);
      const pathwayRef = doc(db, 'pathways', pathwayId);
      
      const pathwayDoc = {
        id: pathwayId,
        profile: {
          country: profile.country,
          course: profile.course,
          academicLevel: profile.academicLevel,
          budgetRange: profile.budgetRange,
          nationality: profile.nationality
        },
        data: pathwayData,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        status: 'active',
        version: '1.0'
      };
      
      await setDoc(pathwayRef, pathwayDoc);
      console.log(`✅ Pathway saved: ${pathwayId}`);
      return pathwayId;
    } catch (error) {
      console.error('Error saving pathway to database:', error);
      throw error;
    }
  }

  /**
   * Generate all possible pathway combinations
   */
  async scrapeAllPathways(onProgress) {
    const totalCombinations = this.countries.length * this.courses.length * 
                            this.academicLevels.length * this.budgetRanges.length * 
                            this.nationalities.length;
    
    console.log(`🚀 Starting pathway scraping for ${totalCombinations} combinations...`);
    
    let completed = 0;
    let successful = 0;
    let failed = 0;
    const results = {
      successful: [],
      failed: [],
      skipped: []
    };

    // Add delay between requests to avoid rate limiting
    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

    for (const country of this.countries) {
      for (const course of this.courses) {
        for (const academicLevel of this.academicLevels) {
          for (const budgetRange of this.budgetRanges) {
            for (const nationality of this.nationalities) {
              const profile = {
                country,
                course,
                academicLevel,
                budgetRange,
                nationality
              };

              const pathwayId = this.generatePathwayId(profile);
              
              try {
                // Check if pathway already exists
                const existingDoc = await this.getPathwayFromDatabase(pathwayId);
                if (existingDoc) {
                  results.skipped.push(pathwayId);
                  completed++;
                  if (onProgress) {
                    onProgress({
                      total: totalCombinations,
                      completed,
                      successful,
                      failed,
                      current: pathwayId,
                      status: 'skipped'
                    });
                  }
                  continue;
                }

                // Generate pathway with AI
                console.log(`🔄 Generating pathway: ${pathwayId}`);
                const pathwayData = await this.generatePathwayWithAI(profile);
                
                // Save to database
                await this.savePathwayToDatabase(profile, pathwayData);
                
                results.successful.push(pathwayId);
                successful++;
                
                // Rate limiting delay (2 seconds between requests)
                await delay(2000);
                
              } catch (error) {
                console.error(`❌ Failed to generate pathway: ${pathwayId}`, error);
                results.failed.push({ id: pathwayId, error: error.message });
                failed++;
              }
              
              completed++;
              
              // Report progress
              if (onProgress) {
                onProgress({
                  total: totalCombinations,
                  completed,
                  successful,
                  failed,
                  current: pathwayId,
                  status: completed === totalCombinations ? 'completed' : 'processing'
                });
              }
              
              // Log progress every 10 items
              if (completed % 10 === 0) {
                console.log(`📊 Progress: ${completed}/${totalCombinations} (${((completed/totalCombinations)*100).toFixed(1)}%)`);
              }
            }
          }
        }
      }
    }

    console.log(`✅ Pathway scraping completed!`);
    console.log(`📊 Results: ${successful} successful, ${failed} failed, ${results.skipped.length} skipped`);
    
    return results;
  }

  /**
   * Get pathway from database
   */
  async getPathwayFromDatabase(pathwayId) {
    try {
      const pathwayRef = doc(db, 'pathways', pathwayId);
      const pathwaySnap = await getDoc(pathwayRef);
      
      if (pathwaySnap.exists()) {
        return pathwaySnap.data();
      }
      return null;
    } catch (error) {
      console.error('Error fetching pathway from database:', error);
      return null;    }
  }
  
  /**
   * Find pathway by user profile
   */
  async findPathwayByProfile(userProfile) {
    try {
      // Convert user profile to our standard format
      const budgetRangeObj = this.getBudgetRangeFromAmount(userProfile.budget || 50000);
      
      const searchProfile = {
        country: userProfile.preferredCountry,
        course: userProfile.desiredCourse,
        academicLevel: userProfile.academicLevel,
        budgetRange: budgetRangeObj,
        nationality: userProfile.nationality || 'Indian' // Default to Indian nationality
      };
      
      const pathwayId = this.generatePathwayId(searchProfile);
      return await this.getPathwayFromDatabase(pathwayId);
    } catch (error) {
      console.error('Error finding pathway by profile:', error);
      return null;
    }
  }

  /**
   * Convert budget amount to budget range category
   */
  getBudgetRangeFromAmount(budget) {
    const amount = typeof budget === 'object' ? budget.max : budget;
    
    for (const range of this.budgetRanges) {
      if (amount >= range.min && amount <= range.max) {
        return range;
      }
    }
    
    // Default to high range if amount is very high
    return this.budgetRanges[2]; // High range
  }
  /**
   * Get scraping statistics
   */
  async getScrapingStats() {
    try {
      const pathwaysRef = collection(db, 'pathways');
      const snapshot = await getDocs(pathwaysRef);
      
      const stats = {
        totalPathways: snapshot.size,
        countries: new Set(),
        courses: new Set(),
        academicLevels: new Set(),
        nationalities: new Set()
      };
      
      snapshot.forEach(doc => {
        const data = doc.data();
        if (data.profile) {
          stats.countries.add(data.profile.country);
          stats.courses.add(data.profile.course);
          stats.academicLevels.add(data.profile.academicLevel);
          stats.nationalities.add(data.profile.nationality);
        }
      });
      
      return {
        totalPathways: stats.totalPathways,
        uniqueCountries: stats.countries.size,
        uniqueCourses: stats.courses.size,
        uniqueAcademicLevels: stats.academicLevels.size,
        uniqueNationalities: stats.nationalities.size,
        estimatedTotal: this.countries.length * this.courses.length * 
                       this.academicLevels.length * this.budgetRanges.length * 
                       this.nationalities.length
      };
    } catch (error) {
      console.error('Error getting scraping stats:', error);
      return null;
    }
  }

  /**
   * Search for pathways by criteria (for finding similar pathways)
   */
  async searchPathways(criteria) {
    try {
      let pathwaysQuery = collection(db, 'pathways');
      
      // Build query based on criteria
      const queryConditions = [];
      
      if (criteria.country) {
        queryConditions.push(where('profile.country', '==', criteria.country));
      }
      
      if (criteria.course) {
        queryConditions.push(where('profile.course', '==', criteria.course));
      }
      
      if (criteria.academicLevel) {
        queryConditions.push(where('profile.academicLevel', '==', criteria.academicLevel));
      }
      
      if (criteria.nationality) {
        queryConditions.push(where('profile.nationality', '==', criteria.nationality));
      }
      
      if (criteria.budgetRange) {
        queryConditions.push(where('profile.budgetRange', '==', criteria.budgetRange));
      }
      
      // Apply query conditions
      if (queryConditions.length > 0) {
        pathwaysQuery = query(pathwaysQuery, ...queryConditions);
      }
      
      const snapshot = await getDocs(pathwaysQuery);
      const results = [];
      
      snapshot.forEach(doc => {
        results.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      return results;
    } catch (error) {
      console.error('Error searching pathways:', error);
      return null;
    }
  }

  /**
   * Get an optimized prompt for university recommendations only
   */
  getUniversityRecommendationsPrompt(profile) {
    return `
You are an expert study abroad consultant specializing in university recommendations. Create a list of top universities for a ${profile.nationality || 'International'} student.

**STUDENT PROFILE:**
- Target Country: ${profile.country}
- Field of Study: ${profile.course}
- Academic Level: ${profile.academicLevel}

**INSTRUCTIONS:**
Provide detailed university recommendations for the student's specific field of study. Include ranking, tuition fees, and location information.

**REQUIRED OUTPUT FORMAT (Valid JSON):**
{
  "universities": [
    {
      "name": "University Name",
      "ranking": "QS World Ranking position",
      "tuitionFee": "Annual fee in USD/local currency",
      "location": "City, State/Province",
      "requirements": {
        "gpa": "Minimum GPA on 4.0 scale",
        "ielts": "Minimum IELTS score",
        "toefl": "Minimum TOEFL score"
      }
    }
  ]
}

Generate exactly 5 university recommendations with complete details:`;
  }

  /**
   * Get an optimized prompt for scholarship opportunities only
   */
  getScholarshipOpportunitiesPrompt(profile) {
    return `
You are an expert on international scholarships. Create a list of relevant scholarship opportunities for a ${profile.nationality || 'International'} student.

**STUDENT PROFILE:**
- Target Country: ${profile.country}
- Field of Study: ${profile.course}
- Academic Level: ${profile.academicLevel}
- Nationality: ${profile.nationality || 'International'}

**INSTRUCTIONS:**
Provide detailed scholarship information that would be applicable to this student's specific profile. Include amounts, eligibility criteria, and application deadlines.

**REQUIRED OUTPUT FORMAT (Valid JSON):**
{
  "scholarships": [
    {
      "name": "Scholarship name",
      "amount": "Amount in USD or percentage",
      "eligibility": "Detailed eligibility criteria",
      "deadline": "Application deadline",
      "applicationProcess": "How to apply"
    }
  ]
}

Generate exactly 3 relevant scholarship opportunities with complete details:`;
  }

  /**
   * Get an optimized prompt for pathway steps only
   */
  getPathwayStepsPrompt(profile) {
    return `
You are an expert study abroad consultant. Create a step-by-step pathway for a ${profile.nationality || 'International'} student planning to study ${profile.course} in ${profile.country}.

**STUDENT PROFILE:**
- Target Country: ${profile.country}
- Field of Study: ${profile.course}
- Academic Level: ${profile.academicLevel}
- Nationality: ${profile.nationality || 'International'}

**INSTRUCTIONS:**
Provide a detailed, chronological step-by-step pathway that guides the student from preparation to enrollment. Each step should include a clear title, description, timeline, and specific tasks.

**REQUIRED OUTPUT FORMAT (Valid JSON):**
{
  "steps": [
    {
      "step": 1,
      "title": "Step title",
      "description": "Detailed step description",
      "duration": "Time needed for this step (e.g., '2-3 months')",
      "tasks": [
        "Specific task 1",
        "Specific task 2",
        "Specific task 3"
      ],
      "status": "pending"
    }
  ]
}

Generate exactly 5 comprehensive steps that cover the entire study abroad journey:`;
  }
}

export default new PathwayScrapingService();
